<?php
define('COMMERCE_PAYULATAM_URL_PRODUCTION', 'https://gateway.payulatam.com/ppp-web-gateway/');
define('COMMERCE_PAYULATAM_URL_TEST', 'https://stg.gateway.payulatam.com/ppp-web-gateway');


define('COMMERCE_PAYULATAM_URL_CONFIRMATION', 'payulatam/confirmation');
define('COMMERCE_PAYULATAM_URL_RESPONSE', 'payulatam/response');

define('COMMERCE_PAYULATAM_DESCRIPTION', 'Commerce virtual store purchase order number @order_id');


define('COMMERCE_PAYULATAM_MERCHANTID', 500238);

define('COMMERCE_PAYULTAM_APIKEY', '6u39nqhq8ftd0hlvnjfs66eh8c');

define('COMMERCE_PAYULATAM_ALIAS', 'PYLATAM-');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payulatam_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['payulatam'] = array(
    'base' => 'commerce_payulatam',
    'title' => t('PAYULATAM'),
    'short_title' => t('PAYULATAM'),
    'description' => t('PAYULATAM Payments Standard'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payulatam_settings_form($settings = NULL) {

  $form = array();

  $form['py_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API KEY'),
    '#required' => TRUE,
    '#default_value' => isset($settings['py_api_key']) ? $settings['py_api_key'] : NULL,
  );

  $form['py_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Id'),
    '#required' => TRUE,
    '#default_value' => isset($settings['py_merchant_id']) ? $settings['py_merchant_id'] : NULL,
  );

  $form['py_account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account Id'),
    '#default_value' => isset($settings['py_account_id']) ? $settings['py_account_id'] : NULL,
  );

  $py_action = COMMERCE_PAYULATAM_URL_PRODUCTION;
  if (isset($settings['py_action_url_production'])) {
    $py_action = $settings['py_action_url_production'];
  }

  $form['py_action_url_production'] = array(
    '#title' => t('Path Form Action'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => $py_action,
    '#required' => TRUE,
  );

  $py_action_test = COMMERCE_PAYULATAM_URL_TEST;
  if (isset($settings['py_action_url_test'])) {
    $py_action_test = $settings['py_action_url_test'];
  }

  $form['py_action_url_test'] = array(
    '#title' => t('Test Path Form Action'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => $py_action_test,
    '#required' => TRUE,
  );

  $items = array();
  if (function_exists('commerce_tax_rates')) {
    $items = commerce_tax_rates();
  }

  $options = array();
  foreach ($items as $name => $item) {
    $options[$name] = $item['title'];
  }

  $form['py_tax'] = array(
    '#title' => t('Tax Rate'),
    '#type' => 'select',
    '#size' => 5,
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => isset($settings['py_tax']) ? $settings['py_tax'] : NULL,
  );

  $py_alias = isset($settings['py_alias']) ? $settings['py_alias'] : COMMERCE_PAYULATAM_ALIAS;
  $form['py_alias'] = array(
    '#title' => t('Alias'),
    '#description' => t('Is concatenated with the order number, example: @example', array(
      '@example' => '"' . $py_alias . '1"',
    )),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => $py_alias,
  );

  $description = isset($settings['py_description']) ? $settings['py_description'] : COMMERCE_PAYULATAM_DESCRIPTION;

  $form['py_description'] = array(
    '#title' => t('Description'),
    '#description' => t('PAYULATAM purchase description, use @order_id to obtain the order number'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => $description,
    '#required' => TRUE,
  );

  $form['py_testing'] = array(
    '#title' => t('Test Enabled'),
    '#type' => 'select',
    '#options' => array(
      '0' => t('No'),
      '1' => t('Yes'),
    ),
    '#required' => TRUE,
    '#default_value' => isset($settings['py_testing']) ? $settings['py_testing'] : NULL,
  );


  return $form;
}

function commerce_payulatam_signature() { 
}

/**
 * Add parameters method pagosonline
 */
function commerce_payulatam_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = $payment_method['settings'];

  if (!isset($settings['py_api_key']) || empty($settings['py_merchant_id'])) {
    drupal_set_message(t('PAYULATAM is not configured for use. No user Id has been specified.'), 'error');
    return array();
  }

  module_load_include('inc', 'commerce_payulatam');

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  $settings['currency_code'] = $currency_code;

  $amount = $wrapper->commerce_order_total->amount->value();

  $settings['amount'] = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

  // Tax.
  $taxes = array(
    'base_price' => 0,
    'total' => 0,
  );

  $components = $wrapper->commerce_order_total->data->value();

  if (@$components['components']) {
    foreach ($components['components'] as $key => $component) {
      if ($component['name'] == 'base_price') {
        $taxes['base_price'] = $component['price']['amount'];
      }
      elseif (in_array($component['price']['data']['tax_rate']['name'], $settings['po_tax'])) {
        $taxes['total'] += $component['price']['amount'];
      }
    }
  }

  $settings['sale_reference'] = commerce_payulatam_get_reference($settings['py_alias'], $order->order_id);


  $signature = commerce_payulatam_get_firm($settings);

  $url_page = commerce_payulatam_get_url($order->order_id);


  $form['#action'] = $settings['py_action_url_production'];

  $description = t($settings['py_description'], array(
    '@order_id' => $order->order_id,
  ));

  // Structure required for PAYULATAM.
  $data = array(
    'merchantId' => $settings['py_merchant_id'],
    'referenceCode' => $settings['sale_reference'],
    'description' => $description,
    'accountId' => $settings['py_account_id'],

    'amount' => $settings['amount'],
    'tax' => 0,

    'taxReturnBase' => $taxes['total'] > 0 ? $taxes['base_price'] : 0,

    'signature' => $signature,

    'accountId' => $settings['py_account_id'],

    'currency' => $settings['currency_code'],
    'buyerEmail' => $order->mail,


    'confirmationUrl' => $url_page['confirmation'],
    'responseUrl' => $url_page['response'],

    'extra1' => $payment_method['instance_id'],
  );

  // Mode Test.
  if (@$settings['py_testing']) {
    $data['test'] = 1;
    $form['#action'] = $settings['py_action_url_test'];
  }

  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to payulatam'),
  );

  return $form;
}